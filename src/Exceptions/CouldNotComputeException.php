<?php

declare(strict_types=1);

/*
 * CalcLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CalcLib\Exceptions;

/**
 * Is thrown when invalid input is given such as div by zero
 */
class CouldNotComputeException extends \CalcLib\Exceptions\ApiException
{
    /**
     * @var string
     */
    private $serverMessage;

    /**
     * @var int
     */
    private $serverCode;

    /**
     * @param string $reason
     * @param \CalcLib\Http\HttpRequest $request
     * @param \CalcLib\Http\HttpResponse $response
     * @param string $serverMessage
     * @param int $serverCode
     */
    public function __construct(
        string $reason,
        \CalcLib\Http\HttpRequest $request,
        \CalcLib\Http\HttpResponse $response,
        string $serverMessage,
        int $serverCode
    ) {
        parent::__construct($reason, $request, $response);
        $this->serverMessage = $serverMessage;
        $this->serverCode = $serverCode;
    }

    /**
     * Returns Server Message.
     * Represents the server's exception message
     */
    public function getServerMessage(): string
    {
        return $this->serverMessage;
    }

    /**
     * Sets Server Message.
     * Represents the server's exception message
     *
     * @required
     * @maps ServerMessage
     */
    public function setServerMessage(string $serverMessage): void
    {
        $this->serverMessage = $serverMessage;
    }

    /**
     * Returns Server Code.
     * Represents the server's error code
     */
    public function getServerCode(): int
    {
        return $this->serverCode;
    }

    /**
     * Sets Server Code.
     * Represents the server's error code
     *
     * @required
     * @maps ServerCode
     */
    public function setServerCode(int $serverCode): void
    {
        $this->serverCode = $serverCode;
    }
}
