<?php

declare(strict_types=1);

/*
 * CalcLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CalcLib;

use CalcLib\Controllers;

/**
 * CalcLib client class
 */
class CalcClient implements ConfigurationInterface
{
    private $simpleCalculator;

    private $configOptions = [
        'timeout' => ConfigurationDefaults::TIMEOUT,
        'enableRetries' => ConfigurationDefaults::ENABLE_RETRIES,
        'numberOfRetries' => ConfigurationDefaults::NUMBER_OF_RETRIES,
        'retryInterval' => ConfigurationDefaults::RETRY_INTERVAL,
        'backOffFactor' => ConfigurationDefaults::BACK_OFF_FACTOR,
        'maximumRetryWaitTime' => ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME,
        'retryOnTimeout' => ConfigurationDefaults::RETRY_ON_TIMEOUT,
        'httpStatusCodesToRetry' => ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY,
        'httpMethodsToRetry' => ConfigurationDefaults::HTTP_METHODS_TO_RETRY,
        'environment' => ConfigurationDefaults::ENVIRONMENT,
        'httpCallback' => null
    ];
    private $authManagers = [];

    /**
     * @param array $configOptions
     * @deprecated Use CalcClientBuilder to set configurations instead
     * @see CalcClientBuilder::init()
     */
    public function __construct(array $configOptions = [])
    {
        $configOptions = array_map(
            function ($c) {
                if (is_object($c)) {
                    $c = clone $c;
                }
                return $c;
            },
            $configOptions
        );
        $this->configOptions = array_merge($this->configOptions, $configOptions);

        // after removal of deprecation
//        $this->configOptions = $configOptions;
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return CalcClientBuilder
     */
    public function toBuilder(): CalcClientBuilder
    {
        return CalcClientBuilder::init($this->configOptions);
    }

    /**
     * Get the client configuration as an associative array
     * @deprecated
     */
    public function getConfiguration(): array
    {
        return array_map(
            function ($c) {
                if (is_object($c)) {
                    $c = clone $c;
                }
                return $c;
            },
            $this->configOptions
        );
    }

    /**
     * Clone this client and override given configuration options
     * @deprecated Will be removed in the next release
     * @see CalcClientBuilder::build()
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->configOptions['timeout'];
    }

    public function shouldEnableRetries(): bool
    {
        return $this->configOptions['enableRetries'];
    }

    public function getNumberOfRetries(): int
    {
        return $this->configOptions['numberOfRetries'];
    }

    public function getRetryInterval(): float
    {
        return $this->configOptions['retryInterval'];
    }

    public function getBackOffFactor(): float
    {
        return $this->configOptions['backOffFactor'];
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->configOptions['maximumRetryWaitTime'];
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->configOptions['retryOnTimeout'];
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->configOptions['httpStatusCodesToRetry'];
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->configOptions['httpMethodsToRetry'];
    }

    public function getEnvironment(): string
    {
        return $this->configOptions['environment'];
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return static::ENVIRONMENT_MAP[$this->getEnvironment()][$server];
    }

    /**
     * Returns Simple Calculator Controller
     */
    public function getSimpleCalculatorController(): Controllers\SimpleCalculatorController
    {
        if ($this->simpleCalculator == null) {
            $this->simpleCalculator = new Controllers\SimpleCalculatorController(
                $this,
                $this->authManagers,
                $this->configOptions['httpCallback']
            );
        }
        return $this->simpleCalculator;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'http://examples.apimatic.io/apps/calculator',
        ],
    ];
}
