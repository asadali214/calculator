<?php

declare(strict_types=1);

/*
 * CalcLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CalcLib\Controllers;

use CalcLib\Exceptions\ApiException;
use CalcLib\ConfigurationInterface;
use CalcLib\ApiHelper;
use CalcLib\Models;
use CalcLib\Http\HttpRequest;
use CalcLib\Http\HttpResponse;
use CalcLib\Http\HttpMethod;
use CalcLib\Http\HttpContext;
use CalcLib\Http\HttpCallBack;
use Unirest\Request;

class SimpleCalculatorController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Calculates the expression using the specified operation.
     *
     * @param array $options Array with all options for search
     *
     * @return float Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCalculate(array $options): float
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{operation}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'operation' => Models\OperationTypeEnum::checkValue($this->val($options, 'operation')),
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'x'         => $this->val($options, 'x'),
            'y'         => $this->val($options, 'y'),
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 412) {
            throw $this->createExceptionFromJson(
                '\\CalcLib\\Exceptions\\CouldNotComputeException',
                'Could not compute the requested calculation',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * Calculates the expression using the specified operation.
     *
     * @deprecated 1.0.0 Hello this is a long comment that should be wrapped properly by
     *                   CodeUtilities.WrapString()
     *
     * @param array $options Array with all options for search
     *
     * @return float Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDeprecatedCalculate(array $options): float
    {
        trigger_error(
            'Method ' . __METHOD__ . ' is deprecated since version 1.0.0. Hello this is a long comment that' .
            'should be wrapped properly by CodeUtilities.WrapString()',
            E_USER_DEPRECATED
        );

        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{operation}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'operation' => Models\OperationTypeEnum::checkValue($this->val($options, 'operation')),
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'x'         => $this->val($options, 'x'),
            'y'         => $this->val($options, 'y'),
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 412) {
            throw $this->createExceptionFromJson(
                '\\CalcLib\\Exceptions\\CouldNotComputeException',
                'Could not compute the requested calculation',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found
     * @return mixed
     */
    private function val(array $arr, string $key, $default = null)
    {
        if (isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }
}
